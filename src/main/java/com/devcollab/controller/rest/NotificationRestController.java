package com.devcollab.controller.rest;

import com.devcollab.domain.Notification;
import com.devcollab.domain.Project;
import com.devcollab.dto.response.NotificationResponseDTO;
import com.devcollab.repository.ProjectRepository;
import com.devcollab.service.system.NotificationService;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/notifications")
@RequiredArgsConstructor
public class NotificationRestController {

    private final NotificationService notificationService;
    private final ProjectRepository projectRepository; // ðŸ‘‰ ThÃªm repository nÃ y

    @GetMapping
    public List<NotificationResponseDTO> getNotifications(Authentication auth) {
        String email = auth.getName();
        List<Notification> notifications = notificationService.getNotificationsByUser(email);

        return notifications.stream().map(n -> {
            String title;
            String message;

            String projectName = projectRepository.findById(n.getReferenceId())
                    .map(Project::getName)
                    .orElse("KhÃ´ng xÃ¡c Ä‘á»‹nh");

            switch (n.getType()) {
                case "PROJECT_CREATED":
                    title = "Dá»± Ã¡n má»›i Ä‘Æ°á»£c táº¡o";
                    message = "Báº¡n Ä‘Ã£ táº¡o dá»± Ã¡n: " + projectName;
                    break;
                case "MEMBER_ADDED":
                    title = "Báº¡n Ä‘Ã£ Ä‘Æ°á»£c thÃªm vÃ o dá»± Ã¡n";
                    message = "Báº¡n Ä‘Ã£ Ä‘Æ°á»£c thÃªm vÃ o dá»± Ã¡n: " + projectName;
                    break;
                case "PROJECT_ARCHIVED":
                    title = "Dá»± Ã¡n Ä‘Ã£ Ä‘Æ°á»£c lÆ°u trá»¯";
                    message = "Dá»± Ã¡n \"" + projectName + "\" Ä‘Ã£ Ä‘Æ°á»£c lÆ°u trá»¯.";
                    break;
                case "TASK_ASSIGNED":
                    title = "Task má»›i Ä‘Æ°á»£c giao";
                    message = "Báº¡n vá»«a Ä‘Æ°á»£c giao task trong dá»± Ã¡n: " + projectName;
                    break;
                case "TASK_CLOSED":
                    title = "Task Ä‘Ã£ Ä‘Ã³ng";
                    message = "Má»™t task trong dá»± Ã¡n \"" + projectName + "\" Ä‘Ã£ Ä‘Æ°á»£c Ä‘Ã³ng.";
                    break;
                default:
                    title = "ThÃ´ng bÃ¡o má»›i";
                    message = "Báº¡n cÃ³ thÃ´ng bÃ¡o má»›i.";
            }

            return new NotificationResponseDTO(
                    n.getNotificationId(),
                    title,
                    message,
                    n.getStatus(),
                    n.getCreatedAt(),
                    n.getReferenceId() // âœ… ThÃªm dÃ²ng nÃ y
            );
        }).collect(Collectors.toList());
    }

    @PutMapping("/{id}/read")
    public void markAsRead(@PathVariable("id") Long notificationId) {
        notificationService.markAsRead(notificationId);
    }
}
