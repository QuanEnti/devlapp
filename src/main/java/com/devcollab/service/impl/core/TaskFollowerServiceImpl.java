package com.devcollab.service.impl.core;

import com.devcollab.domain.Task;
import com.devcollab.domain.TaskFollower;
import com.devcollab.domain.User;
import com.devcollab.dto.TaskFollowerDTO;
import com.devcollab.exception.NotFoundException;
import com.devcollab.repository.TaskFollowerRepository;
import com.devcollab.repository.TaskRepository;
import com.devcollab.repository.UserRepository;
import com.devcollab.service.core.TaskFollowerService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
@RequiredArgsConstructor
public class TaskFollowerServiceImpl implements TaskFollowerService {

    private final TaskFollowerRepository followerRepo;
    private final TaskRepository taskRepo;
    private final UserRepository userRepo;

    @Override
    public List<TaskFollowerDTO> getFollowersByTask(Long taskId) {
        return followerRepo.findByTask_TaskId(taskId)
                .stream()
                .map(TaskFollowerDTO::fromEntity)
                .toList();
    }

    @Override
    @Transactional
    public boolean assignMember(Long taskId, Long userId) {
        // üîπ Ki·ªÉm tra ƒë√£ t·ªìn t·∫°i ch∆∞a
        if (followerRepo.existsByTaskAndUser(taskId, userId)) {
            System.out.println("‚ö†Ô∏è Member " + userId + " ƒë√£ ƒë∆∞·ª£c g√°n v√†o task " + taskId);
            return false;
        }

        // üîπ Ki·ªÉm tra task v√† user c√≥ t·ªìn t·∫°i
        Task task = taskRepo.findById(taskId)
                .orElseThrow(() -> new NotFoundException("Task not found"));
        User user = userRepo.findById(userId)
                .orElseThrow(() -> new NotFoundException("User not found"));

        // üîπ Th√™m v√†o b·∫£ng TaskFollower
        followerRepo.save(new TaskFollower(task, user));
        System.out.println("‚úÖ G√°n member " + userId + " v√†o task " + taskId + " th√†nh c√¥ng");
        return true;
    }

    @Override
    @Transactional
    public boolean unassignMember(Long taskId, Long userId) {
        // üîπ Ki·ªÉm tra c√≥ t·ªìn t·∫°i tr∆∞·ªõc khi x√≥a
        boolean exists = followerRepo.existsByTaskAndUser(taskId, userId);
        if (!exists) {
            System.out.println("‚ö†Ô∏è Member " + userId + " ch∆∞a ƒë∆∞·ª£c g√°n trong task " + taskId);
            return false;
        }

        // üîπ X√≥a kh·ªèi b·∫£ng TaskFollower
        followerRepo.deleteByTaskAndUser(taskId, userId);
        System.out.println("üóëÔ∏è ƒê√£ b·ªè g√°n member " + userId + " kh·ªèi task " + taskId);
        return true;
    }
}
